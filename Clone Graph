#Given a reference of a node in a connected undirected graph.

#Return a deep copy (clone) of the graph.

#Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if node is None:
            return None
        
        clone={}
        arr=[]
        arr.append(node)
        clone[node.val]=Node(node.val)
        while arr:
            current=arr.pop()
            for i in current.neighbors:
                if i.val not in clone:
                    clone[i.val]=Node(i.val)
                    arr.append(i)
                clone[current.val].neighbors.append(clone[i.val])
        return clone[1]
            
            
